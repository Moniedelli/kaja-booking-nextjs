// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}
model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String?
  hashedPassword  String?
  emailVerified   DateTime?
  status          UserStatus @default(ACTIVE)
  role            Role @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  transactions    Transaction[]
}

model Tour {
  id            Int            @id @default(autoincrement())
  tourName      String
  location      String
  description   String
  capacity      Int
  price         Int
  duration      String
  detailDescription   String?
  detailInfo          String?
  note                String?
  itinerary           String?
  include             String?
  exclude             String?
  imageSrc            String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
}

model Transaction {
  id                Int                 @id @unique
  total             Int
  status            Transactions_status @default(PENDING_PAYMENT)
  quantity          Int?
  booking_date      DateTime?
  snap_token        String?             
  snap_redirect_url String?            
  payment_method    String?             
  createdAt         DateTime?           @default(now()) @db.Timestamp(0)
  updatedAt         DateTime?           @default(now()) @db.Timestamp(0)
  userId            Int
  tourId            Int
  user              User                @relation(fields: [userId], references: [id])
  tours             Tour                @relation(fields: [tourId], references: [id])
  @@map("transactions")
}


enum Transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
}

// model RatingReview {
//   id          Int       @id @default(autoincrement())
//   rating      Float
//   review      String?
//   userId      Int
//   user        User      @relation(fields: [userId], references: [id])
// }

// model Payment {
//   id           Int      @id @default(autoincrement())
//   amount       Float
//   currency     String
//   status       String   // Contoh: 'pending', 'success', 'failed'
//   description  String?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   bookingId    Int
//   booking      Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
// }

// model Community {
//   id            Int       @id @default(autoincrement())
//   name          String
//   description   String
//   leaders       CommunityLeader[]   // Relasi ke komite atau pemimpin komunitas
//   activities    CommunityActivity[]
//   // Tambahkan atribut lain yang relevan untuk komunitas Anda
// }

// model CommunityLeader {
//   id          Int      @id @default(autoincrement())
//   name        String
//   role        String   // Contoh: Ketua, Sekretaris, Bendahara, dsb.
//   userId      Int      // Relasi ke pengguna yang sesungguhnya
//   communityId Int  // Relasi ke komunitas yang sesungguhnya
//   community   Community @relation(fields: [communityId], references: [id])
//   // Tambahkan atribut lain yang relevan untuk anggota komite
// }

// model CommunityActivity {
//   id            Int       @id @default(autoincrement())
//   name          String
//   description   String
//   date          DateTime   // Tanggal kegiatan dilakukan
//   communityId   Int        // Relasi ke komunitas yang melakukan kegiatan
//   community   Community @relation(fields: [communityId], references: [id])
//   // Tambahkan atribut lain yang relevan untuk kegiatan komunitas
// }

