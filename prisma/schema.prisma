// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String
  hashedPassword  String
  phoneNumber     String
  status          UserStatus @default(ACTIVE)
  role            Role @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  transactions    Transaction[]
}

model Tour {
  id                  Int            @id @default(autoincrement())
  tourName            String
  location            String
  description         String
  price               Int
  itinerary           String
  note                String?
  imageSrc            String[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  transactions        Transaction[]
}

model Transaction {
  id                Int                 @id @default(autoincrement())
  total             Int
  status            Transactions_status @default(PENDING_PAYMENT)
  quantity          Int
  booking_date      DateTime            
  createdAt         DateTime            @default(now()) @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @db.Timestamp(0)
  userId            Int
  tourId            Int
  user              User                @relation(fields: [userId], references: [id])
  tours             Tour                @relation(fields: [tourId], references: [id])
  @@map("transactions")
}


enum Transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
  DONE
}

// model Inbox {
//   id        Int      @id @default(autoincrement())
//   sender    String
//   email     String
//   subject   String
//   message   String
//   createdAt DateTime @default(now())
// }

// model Itinerary {
//   id                   Int            @id @default(autoincrement())
//   tourId               Int
//   time                 String
//   description          String
//   createdAt            DateTime       @default(now())
//   updatedAt            DateTime       @updatedAt
//   tour                 Tour           @relation(fields: [tourId], references: [id])
// }

// model RatingReview {
//   id          Int       @id @default(autoincrement())
//   rating      Float
//   review      String?
//   userId      Int
//   user        User      @relation(fields: [userId], references: [id])
// }

// model Payment {
//   id           Int      @id @default(autoincrement())
//   amount       Float
//   currency     String
//   status       String   // Contoh: 'pending', 'success', 'failed'
//   description  String?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   bookingId    Int
//   booking      Booking     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
// }
